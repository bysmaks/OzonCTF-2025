use num_bigint::{BigUint, RandBigInt};
use rand::thread_rng;
use std::collections::HashMap;

const _0x1337_CONST: () = {
    #[allow(dead_code)]
    static _0xDEAD: [u8; 0] = [];
};

macro_rules! _0xDEADBEEF {
    ($x:expr) => {
        (($x as u64).wrapping_mul(0x5DEECE66D).wrapping_add(0xB) & 0xFFFFFFFFFFFF) as u32
    };
}

fn _0xCAFEBABE(n: &BigUint, k: u32) -> bool {
    let mut _0x1337_map = HashMap::new();
    _0x1337_map.insert("check", n <= &BigUint::from(1u32));
    _0x1337_map.insert("small", n <= &BigUint::from(3u32));
    _0x1337_map.insert("even", n.modpow(&BigUint::from(1u32), &BigUint::from(2u32)) == BigUint::from(0u32));

    if *_0x1337_map.get("check").unwrap() { return false; }
    if *_0x1337_map.get("small").unwrap() { return true; }
    if *_0x1337_map.get("even").unwrap() { return false; }

    let _0xDEAD = n - BigUint::from(1u32);
    let mut _0xBEEF = _0xDEAD.clone();
    let mut _0xCAFE = 0u32;

    while &_0xBEEF % 2u32 == BigUint::from(0u32) {
        _0xBEEF /= 2u32;
        _0xCAFE = _0xCAFE.wrapping_add(1);
    }

    let mut _0x1337_rng = thread_rng();
    'witness: for _ in 0..k {
        let _0xFEED = _0x1337_rng.gen_biguint_range(
            &BigUint::from(2u32), 
            &(n - BigUint::from(2u32))
        ) + BigUint::from(2u32);
        
        let mut _0xCODE = _0xFEED.modpow(&_0xBEEF, n);

        if _0xCODE == BigUint::from(1u32) || _0xCODE == _0xDEAD {
            continue 'witness;
        }

        for _ in 1.._0xCAFE {
            _0xCODE = _0xCODE.modpow(&BigUint::from(2u32), n);
            if _0xCODE == BigUint::from(1u32) {
                return false;
            }
            if _0xCODE == _0xDEAD {
                continue 'witness;
            }
        }
        return false;
    }
    true
}

fn _0xBAADF00D(bits: u64) -> BigUint {
    let mut _0x1337_rng = thread_rng();
    loop {
        let _0xDEAD = _0x1337_rng.gen_biguint(bits);
        if _0xCAFEBABE(&_0xDEAD, 20) {
            return _0xDEAD;
        }
    }
}

fn main() {
    let _0xDEAD = _0xBAADF00D(1111);
    let _0xBEEF = _0xBAADF00D(1111);
    let _0xCAFE = _0xBAADF00D(1101);
    let _0xFEED = &_0xDEAD * &_0xBEEF;
    let _0xCODE = (&_0xDEAD + &_0xBEEF) % &_0xCAFE;

    let _0x1337_exp = BigUint::from(31337u32);
    let flag = "ozonctf{0bFu5C473d_R54_l0L}";
    let _0xBAAD = flag.as_bytes();
    let _0xF00D = BigUint::from_bytes_be(_0xBAAD);
    let _0xDEADBEEF = _0xF00D.modpow(&_0x1337_exp, &_0xFEED);

    println!("_0xCODE = {}", _0xCODE);          // _0xCODE = 3525173649875849647250494939983365090307292184140825559824371067255967572481155664760266876001530881276611264572797678685015840970309380759054443977909071879229260635251841846728883089176928244474790058546068140931898539938665961815281286558333826330535075409430232125678996424555713777510851486176635232429176069384571930415455316
    println!("_0xFEED = {}", _0xFEED);          // _0xFEED = 8563896030641177325896334801778990334828503092422748016916530629553820597507937639346260701518319501124021077030068564713587164263447533410749478574832886433345010006709297351429060482254934994360299861361423806927151381806807161865152019112799277694180070282868813115593165973515180889622083181638492793653719977065796166157338075819062873134595815117865930503821132605904451027387070756219190466926643279421027985333933031965463671769897109472631268783881031175126468470394651758411479832999804514373641713698769740305014851744860249370633615957327249355853510719637958454726819930937388289720839665713691377666895706854793467027418012139281943121589640417558720923
    println!("_0xCAFE = {}", _0xCAFE);          // _0xCAFE = 25906087398231922088875333472700592257021846043100272195392617529684408338758559353542605146819099131146975373780364457149310369452880696798954587736481857042087284153506525830668615241274024986538556701631079744323417157110676162265483280541248994065552129363153037220797045923476720878213424015971717760354398140796534675749069603
    println!("_0xDEADBEEF = {}", _0xDEADBEEF);  // _0xDEADBEEF = 1162516153553709142015173865188837252081133004682121812865876169918955321093608544300235236835735032953540021189769274389171325793882863917812638598515584127367348763605548259436841601817458240342943056517955851072004109179050113372921060148493054561220122338058044321706444745787258933380431473438163058346652806768806874502368138657102578674921555840804615976663465557329987549212251016225717252636366670288169848829256752279732105328553281523955573691250863409107916852166547734337743793648297206427525777770389224229373513044343142790460453092716008075807990142130982374957007769098319786850481065246114599360617196960121415410401987891756294211613102125322669247
    println!("_0x1337_exp = {}", _0x1337_exp);  // _0x1337_exp = 31337
}
