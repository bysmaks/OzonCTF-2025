# Dynamic decoy server that adapts to the environment
server {
    listen 80;
    
    # Match direct IP access - include all IP addresses with regexp
    server_name localhost snake.web.ozon-ctf-2025.ru 127.0.0.1 "" ~^\d+\.\d+\.\d+\.\d+$;
    
    # Add debug header
    add_header X-Red-Herring "You found the default_server directive, but is this really the default for all requests?";
    
    # Use Lua to construct the redirect URL dynamically
    location / {
        content_by_lua_block {
            -- Get the host header which includes the port
            local host_with_port = ngx.var.http_host or ""
            
            -- Initialize redirect URL
            local redirect_url = "http://snake.ctf.local"
            
            -- Extract port if present in the host header
            local _, _, port = string.find(host_with_port, ":(%d+)")
            if port then
                redirect_url = redirect_url .. ":" .. port
            end
            
            -- Add the original request path if it exists
            if ngx.var.request_uri and ngx.var.request_uri ~= "/" then
                redirect_url = redirect_url .. ngx.var.request_uri
            else
                redirect_url = redirect_url .. "/snake"
            end
            
            ngx.header["Location"] = redirect_url
            ngx.status = 302
            ngx.say("<html>")
            ngx.say("<head><title>302 Found</title></head>")
            ngx.say("<body>")
            ngx.say("<center><h1>302 Found</h1></center>")
            ngx.say("<p>The document has moved <a href=\"" .. redirect_url .. "\">here</a>.</p>")
            ngx.say("<hr><center>openresty</center>")
            ngx.say("</body>")
            ngx.say("</html>")
        }
    }
}
