# DO NOT COMMENT ANY OF these variables, the deploy will fail immediately otherwise
#
# Time settings for containers
LEAVE_TIME=1800            # Default container lifetime in seconds (30 min)
ADD_TIME=600               # Additional time when extending container life (10 min)

# Container image and identification
COMPOSE_PROJECT_NAME=nginx_serpent # Task name
IMAGES_NAME=localhost/nginx_snake_challenge:latest  # Docker image name
FLAG=CTF{nginx_default_server_first_alphabetical}   # The flag users will discover

# Port configuration
PORT_IN_CONTAINER=80       # Port the challenge service runs on inside container
START_RANGE=14000          # Start of port range for container mapping
STOP_RANGE=16000           # End of port range for container mapping
FLASK_APP_PORT=33355       # Port where the flask deployer app will be accessible
DIRECT_TEST_PORT=44444     # Port for directly testing the challenge (bypassing deployer)

# Network configuration
NETWORK_NAME=ctf_snake_network_1744225787_1744225792_1744225827
NETWORK_SUBNET=172.28.16.0/22      # Subnet for the Docker network 

# PostgreSQL Database Configuration (required for new deployer version)
DB_HOST=postgres
DB_PORT=5432
DB_NAME=ctf_deployer
DB_USER=postgres
DB_PASSWORD=secure_password       # Change this to a secure password
DB_POOL_MIN=10                    # Minimum connections in the main database pool
DB_POOL_MAX=30                    # Maximum connections in the main database pool

# Challenge details (displayed to users)
CHALLENGE_TITLE="Serpent's Hidden Path"
CHALLENGE_DESCRIPTION="Navigate the maze of NGINX configurations to find the hidden flag. The path is not always what it seems, and the default isn't always the default. Can you find the serpent's secret? Hint: Use /etc/hosssstss to resssolve namessss locally."
COMMAND_CONNECT=http://<ip>:<port>/snake

# Resource limits for user containers
CONTAINER_MEMORY_LIMIT=512M    # Maximum memory per container
CONTAINER_SWAP_LIMIT=512M      # Maximum swap memory per container
CONTAINER_CPU_LIMIT=1.0        # CPU cores allocated per container (increased for better game performance)
CONTAINER_PIDS_LIMIT=100      # Maximum process IDs per container

# Security options for user containers (preserving your original settings)
ENABLE_NO_NEW_PRIVILEGES=false  # Allow privilege escalation for better functionality
ENABLE_READ_ONLY=false          # Don't make container filesystem read-only
ENABLE_TMPFS=true               # Enable temporary filesystem
TMPFS_SIZE=64M                  # Size of tmpfs

# Container capability configuration (preserving your original settings)
DROP_ALL_CAPABILITIES=false     # Don't drop all capabilities for better functionality 
CAP_NET_BIND_SERVICE=true       # Allow binding to privileged ports (<1024)
CAP_CHOWN=true                  # Allow changing file ownership

# Rate limiting to prevent abuse
MAX_CONTAINERS_PER_HOUR=10000     # Maximum containers per IP address per hour (increased for testing)
RATE_LIMIT_WINDOW=3600          # Rate limit time window in seconds (1 hour)

# Testing/Debugging (required for new deployer)
DEBUG_MODE=true                # Enable debug for flask_app deployer werkzeug server
BYPASS_CAPTCHA=true           # Skip captcha validation for testing (true/false)

# Thread pool configuration (required for new deployer)
THREAD_POOL_SIZE=5000                # Maximum number of worker threads for the container monitoring pool

# Timing configurations (required for new deployer)
MAINTENANCE_INTERVAL=600           # Seconds between maintenance runs (default: 5 minutes)
CONTAINER_CHECK_INTERVAL=600        # How often to check if containers have expired (seconds)
CAPTCHA_TTL=300                    # Time-to-live for CAPTCHA entries (seconds)

# Centralized cleanup configuration (required for new deployer)
MAINTENANCE_BATCH_SIZE=10          # Number of containers to process in each cleanup batch
MAINTENANCE_POOL_MIN=3             # Minimum connections in the dedicated cleanup database pool
MAINTENANCE_POOL_MAX=5             # Maximum connections in the dedicated cleanup database pool

# Resource allocation settings (required for new deployer)
PORT_ALLOCATION_MAX_ATTEMPTS=5     # Maximum number of attempts to allocate a port before failing
STALE_PORT_MAX_AGE=10            # Maximum age in seconds before a port allocation is considered stale

# Global resource quotas (required for new deployer)
MAX_TOTAL_CONTAINERS=1000           # Maximum containers across all users
MAX_TOTAL_CPU_PERCENT=1600           # Maximum total CPU (800% = 8 cores fully utilized)
MAX_TOTAL_MEMORY_GB=32              # Maximum total memory in GB
RESOURCE_CHECK_INTERVAL=100          # Seconds between resource checks
RESOURCE_SOFT_LIMIT_PERCENT=80      # Warning threshold (percentage of limits)
ENABLE_RESOURCE_QUOTAS=true         # Enable/disable resource quota checks

# Metrics configuration (required for new deployer)
METRICS_ENABLED=true                # Enable Prometheus metrics collection
ENABLE_LOGS_ENDPOINT=true           # Whether to enable the /logs endpoint
# Admin key for detailed resource status (set to a secure random value)
ADMIN_KEY="uD3ehiFJOIDJOEWhjhlkdcjvlkhdia893d"
